name: 'Main'

on:
  push:
    tags: ['*']
    branches: ['*']
  pull_request:
    branches: ['*']
  workflow_dispatch:

permissions: {}

jobs:

  gofmt:
    name: 'Gofmt'
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633'
      - name: 'Set up Go'
        uses: 'actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491'
        with:
          go-version-file: './go.mod'
          check-latest: true
      - name: 'Gofmt'
        run: |
          make gofmt

  staticcheck:
    name: 'Staticcheck'
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633'
      - name: 'Set up Go'
        uses: 'actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491'
        with:
          go-version-file: './go.mod'
          check-latest: true
      - name: 'Staticcheck'
        uses: 'dominikh/staticcheck-action@ba605356b4b29a60e87ab9404b712f3461e566dc'
        with:
          install-go: false

  test:
    name: 'Test on ${{ matrix.os }}'
    needs: ['gofmt', 'staticcheck']
    runs-on: '${{ matrix.os }}'
    permissions:
      contents: 'read'
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633'
      - name: 'Set up Go'
        uses: 'actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491'
        with:
          go-version-file: './go.mod'
          check-latest: true
      - name: 'Test'
        run: |
          make test

  test-race:
    name: 'Test race'
    needs: ['gofmt', 'staticcheck']
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633'
      - name: 'Set up Go'
        uses: 'actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491'
        with:
          go-version-file: './go.mod'
          check-latest: true
      - name: 'Test race'
        run: |
          make test-race

  test-e2e:
    name: 'Test e2e'
    needs: ['gofmt', 'staticcheck']
    runs-on: 'ubuntu-20.04'
    permissions:
      contents: 'read'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633'
      - name: 'Set up Go'
        uses: 'actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491'
        with:
          go-version-file: './go.mod'
          check-latest: true
      - name: 'Test e2e'
        run: |
          make test-e2e

  build:
    name: >-
      Build for
      ${{ matrix.go.GOOS }}-${{ matrix.go.GOARCH }}
      ${{ matrix.go.GOARM != '' && format('v{0}', matrix.go.GOARM) || '' }}
    needs: ['test', 'test-race', 'test-e2e']
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    strategy:
      fail-fast: false
      matrix:
        go: [
          { GOOS: 'linux',   GOARCH: 'amd64'   },
          { GOOS: 'linux',   GOARCH: 'arm64'   },
          { GOOS: 'linux',   GOARCH: 'arm',     GOARM: '7' },
          { GOOS: 'linux',   GOARCH: 'arm',     GOARM: '6' },
          { GOOS: 'linux',   GOARCH: 'riscv64' },
          { GOOS: 'linux',   GOARCH: 'ppc64le' },
          { GOOS: 'linux',   GOARCH: 's390x'   },
          { GOOS: 'windows', GOARCH: 'amd64'   },
          { GOOS: 'windows', GOARCH: 'arm64'   },
          { GOOS: 'darwin',  GOARCH: 'amd64'   },
          { GOOS: 'darwin',  GOARCH: 'arm64'   },
        ]
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633'
      - name: 'Set up Go'
        uses: 'actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491'
        with:
          go-version-file: './go.mod'
          check-latest: true
      - name: 'Build'
        run: |
          make build \
            GOOS="${{ matrix.go.GOOS }}" \
            GOARCH="${{ matrix.go.GOARCH }}" \
            GOARM="${{ matrix.go.GOARM }}"
          file ./dist/*-*-* && gzip -nv ./dist/*-*-*
      - name: 'Upload artifacts'
        uses: 'actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3'
        with:
          name: 'dist-${{ matrix.go.GOOS }}-${{ matrix.go.GOARCH }}-${{ matrix.go.GOARM }}'
          path: './dist/*.gz'
          retention-days: 1

  build-push-docker:
    name: 'Build and push Docker images'
    needs: ['build']
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633'
      - name: 'Set up QEMU'
        uses: 'docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3'
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@2b51285047da1547ffb1b2203d8be4c0af6b1f20'
      - name: 'Login to Docker Hub'
        if: "github.event_name != 'pull_request'"
        uses: 'docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d'
        with:
          registry: 'docker.io'
          username: '${{ secrets.DOCKERHUB_USERNAME }}'
          password: '${{ secrets.DOCKERHUB_TOKEN }}'
      - name: 'Extract metadata'
        id: 'meta'
        uses: 'docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81'
        with:
          images: |
            docker.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
      - name: 'Build and push'
        uses: 'docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0'
        with:
          context: './'
          platforms: 'linux/amd64,linux/arm64/v8,linux/arm/v7,linux/arm/v6,linux/riscv64,linux/ppc64le,linux/s390x'
          tags: '${{ steps.meta.outputs.tags }}'
          labels: '${{ steps.meta.outputs.labels }}'
          push: "${{ github.event_name != 'pull_request' }}"

  release-github:
    name: 'Create GitHub release'
    if: "startsWith(github.ref, 'refs/tags/v')"
    needs: ['build', 'build-push-docker']
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'write'
    steps:
      - name: 'Download artifacts'
        uses: 'actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427'
        with:
          pattern: 'dist-*'
          merge-multiple: true
      - name: 'Create release'
        env:
          GITHUB_PAT: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          RELEASE_STATUS="$(curl -fs --proto '=https' --tlsv1.3 --globoff \
            --url "https://api.github.com/repos/${GITHUB_REPOSITORY:?}/releases/tags/${GITHUB_REF_NAME:?}" \
            --header "Authorization: Bearer ${GITHUB_PAT:?}" \
            --header 'Accept: application/vnd.github.v3+json' \
            --header 'Content-Type: application/json' \
            --write-out '%{http_code}' --output /dev/null ||:)"
          if [ "${RELEASE_STATUS:?}" = '200' ]; then exit 0; fi
          RELEASE_ID="$(curl -fsS --proto '=https' --tlsv1.3 --globoff \
            --url "https://api.github.com/repos/${GITHUB_REPOSITORY:?}/releases" \
            --header "Authorization: Bearer ${GITHUB_PAT:?}" \
            --header 'Accept: application/vnd.github.v3+json' \
            --header 'Content-Type: application/json' \
            --data "$(jq -rn --arg tag "${GITHUB_REF_NAME:?}" '{"name": $tag, "tag_name": $tag, "generate_release_notes": true}')" | jq -r '.id')"
          if [ -z "${RELEASE_ID-}" ] || [ "${RELEASE_ID:?}" = 'null' ]; then exit 1; fi
          for asset in ./*; do
            [ -f "${asset:?}" ] || continue
            encodedAssetName="$(jq -rn --arg v "$(basename "${asset:?}")" '$v|@uri')"
            curl -fsS --proto '=https' --tlsv1.3 --globoff \
              --url "https://uploads.github.com/repos/${GITHUB_REPOSITORY:?}/releases/${RELEASE_ID:?}/assets?name=${encodedAssetName:?})" \
              --header "Authorization: Bearer ${GITHUB_PAT:?}" \
              --header 'Accept: application/vnd.github.v3+json' \
              --header 'Content-Type: application/octet-stream' \
              --data-binary "@${asset:?}" --output /dev/null
          done
